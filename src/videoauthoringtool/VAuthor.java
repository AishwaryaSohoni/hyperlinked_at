/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package videoauthoringtool;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 *
 * @author Vaishnavi
 */

public class VAuthor extends javax.swing.JFrame{

    public static int[][][] primaryVideoFrames, secondaryVideoFrames;
    private int x1, x2, y1, y2, w, h, hyperLinks, primary, height=288, width=352;
    private static String secondaryFileName, primaryFileName;
    private ArrayList<String> hyperLinkNames = new ArrayList<>();
    
    ArrayList<Metafile> metaRecords = new ArrayList<>();

    /**
     * Creates new form VAuthor
     */
    public VAuthor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSlider2 = new javax.swing.JSlider();
        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(770, 550));
        setMinimumSize(new java.awt.Dimension(770, 550));
        setPreferredSize(new java.awt.Dimension(770, 550));

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(356, 292));
        jPanel1.setMinimumSize(new java.awt.Dimension(356, 292));
        jPanel1.setPreferredSize(new java.awt.Dimension(356, 292));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setAlignmentY(0.0F);
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel3.setMaximumSize(new java.awt.Dimension(352, 288));
        jLabel3.setMinimumSize(new java.awt.Dimension(352, 288));
        jLabel3.setPreferredSize(new java.awt.Dimension(352, 288));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel3MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel3MouseReleased(evt);
            }
        });
        jLabel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel3MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jPanel2.setAlignmentX(0.0F);
        jPanel2.setAlignmentY(0.0F);
        jPanel2.setMaximumSize(new java.awt.Dimension(356, 292));
        jPanel2.setMinimumSize(new java.awt.Dimension(356, 292));
        jPanel2.setPreferredSize(new java.awt.Dimension(356, 292));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel4.setMaximumSize(new java.awt.Dimension(352, 288));
        jLabel4.setMinimumSize(new java.awt.Dimension(352, 288));
        jLabel4.setPreferredSize(new java.awt.Dimension(352, 288));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Actions");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Import Primary Video", "Import Secondary Video", "Create HyperLink" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField2.setEditable(false);
        jTextField2.setText("Select Link");

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jButton1.setText("Connect Video");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Save File");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(65, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        jSlider2.setMaximum(719);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jSlider1.setMaximum(719);
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scollMouseReleaseHandle(evt);
            }
        });
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jSlider1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Connect Video Button
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        //connecting to the secondary video
        String linkSelected = jList2.getSelectedValue().toString();
        for(int i=0; i<hyperLinks; i++){
                    
            if(metaRecords.get(i).rectName.equals(linkSelected)){
                metaRecords.get(i).linkedVideoName = secondaryFileName;
                metaRecords.get(i).linkedVideoStartFrame = jSlider2.getValue();
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    
    //Selecting an action from the List
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        try{
                 switch (jList1.getSelectedIndex()){
                    case 0: OpenFile(1);break;      //loading a primary video
                    case 1: OpenFile(0); break;     //loading a secondary video
                    case 2: launchDialog(); break;  //creating a new hyperlink
                    default: 
                }
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(VAuthor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jList1ValueChanged

    //Primary slider changed
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        JSlider j = (JSlider) evt.getSource();
        int frameNumber = j.getValue();
        
        //loading the corresponding frame
        //System.out.println("frameNumber passed="+frameNumber);
        
        setFrame(frameNumber,1);
        setRectangles();
    }//GEN-LAST:event_jSlider1StateChanged

    //Save File Button
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        try {
            // TODO add your handling code here:
            saveMetaRecords();
        } 
        catch (IOException ex) {
            Logger.getLogger(VAuthor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:
        JSlider j = (JSlider) evt.getSource();
        int frameNumber = j.getValue();
        setFrame(frameNumber,0);        
    }//GEN-LAST:event_jSlider2StateChanged

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseDragged
        // TODO add your handling code here:
        x2 = evt.getX();
        y2 = evt.getY();
    }//GEN-LAST:event_jLabel3MouseDragged

    private void jLabel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MousePressed
        // TODO add your handling code here:
            x1 = evt.getX();
            y1 = evt.getY();
    }//GEN-LAST:event_jLabel3MousePressed

    private void jLabel3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseReleased
        // TODO add your handling code here:
        
        if(!jList2.isSelectionEmpty() && !linkPresentForFrame()){
            x2 = evt.getX();
            y2 = evt.getY();
            w = x1 - x2;
            h = y1 - y2;
            w = w * -1;
            h = h * -1;
            Graphics g = jLabel3.getGraphics();
            g.setColor(Color.red);
            int[] arr = getDiagonalCoord(x1,y1,x2,y2);
            
            g.drawRect(arr[0], arr[1], Math.abs(arr[2]-arr[0]), Math.abs(arr[3]-arr[1]));
            
            //adding keyframe to the meta record
            
            String linkSelected = jList2.getSelectedValue().toString();
            KeyFrame key = new KeyFrame(jSlider1.getValue(),arr[0],arr[1],arr[2],arr[3]);
            
            for(int i=0; i<hyperLinks; i++){
                if(metaRecords.get(i).rectName.equals(linkSelected)){
                    metaRecords.get(i).kf.add(key);
                    metaRecords.get(i).numOfKeyFrames++;
                }
            }
        }
    }//GEN-LAST:event_jLabel3MouseReleased

    private boolean linkPresentForFrame(){
        //checking if rectangle is already present for the selected hyperlink on the current frame
        String linkSelected = jList2.getSelectedValue().toString();
        
        for(int i=0; i<hyperLinks; i++){
            if(metaRecords.get(i).rectName.equals(linkSelected)){
                for(int j=0; j<metaRecords.get(i).numOfKeyFrames; j++){
                    KeyFrame k = metaRecords.get(i).kf.get(j);
                    if(k.frameNum==jSlider1.getValue())
                        return true;
                }
            }
        }
        return false;
    }
    
    private void scollMouseReleaseHandle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scollMouseReleaseHandle
        // TODO add your handling code here:
        /*System.out.println("Here on release.");
        setRectangles();*/
    }//GEN-LAST:event_scollMouseReleaseHandle

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // TODO add your handling code here:
        setRectangles();
    }//GEN-LAST:event_jList2ValueChanged

    private void jSlider1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSlider1CaretPositionChanged
        // TODO add your handling code here:
        setRectangles();
    }//GEN-LAST:event_jSlider1CaretPositionChanged

        public int[] getDiagonalCoord(int x1,int y1,int x2, int y2)
    {
        int [] arr = new int[4];
        if((x1-x2)>0 && (y1-y2)<0)
        {
            arr[0]=x2; arr[2]=x1;
            arr[1]=y1; arr[3]=y2;
        }
        if((x1-x2)<0 && (y1-y2)>0)
        {
            arr[0]=x1; arr[2]=x2;
            arr[1]=y2; arr[3]=y1;
        }
        if((x1-x2)<0 && (y1-y2)<0)
        {
            arr[0]=x1; arr[2]=x2;
            arr[1]=y1; arr[3]=y2;
        }
        if((x1-x2)>0 && (y1-y2)>0)
        {
            arr[0]=x2; arr[2]=x1;
            arr[1]=y2; arr[3]=y1;
        }
        return arr;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VAuthor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    
    public void OpenFile(int primary) throws FileNotFoundException{
        JFileChooser fileChooser = new JFileChooser("C:\\Users\\Aishwarya\\Documents\\NetBeansProjects\\NewVideoPlayer");
        int status = fileChooser.showOpenDialog(this);
         
        if(status == 0)
        {
            try {
                ReadVideo(fileChooser.getSelectedFile().getPath(),primary);
            } 
            catch (IOException ex) {
                Logger.getLogger(VideoAuthoringTool.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void launchDialog()  
    {  
        String inputValue = JOptionPane.showInputDialog("Enter HyperLink name");
        if(inputValue!=null){
            hyperLinkNames.add(inputValue);
            jList2.setListData(hyperLinkNames.toArray());
            Metafile mf = new Metafile();
            mf.rectID = hyperLinks++;
            mf.rectName = inputValue;
            mf.linkedVideoName = secondaryFileName;
            mf.linkedVideoStartFrame = jSlider1.getValue();
            metaRecords.add(mf);
            jList2.setSelectedIndex(hyperLinkNames.size()-1);
        }
        //System.out.println("name given = "+inputValue);
    }
    
    public void saveMetaRecords() throws IOException{
        Metafile record;
        KeyFrame key;
        String metaFile = "";
        primaryFileName = primaryFileName.split(".rgb")[0];
        System.out.println("primary file name "+primaryFileName.split(".rgb")[0]);
        FileWriter fstream = new FileWriter(primaryFileName+".meta");
        BufferedWriter out = new BufferedWriter(fstream);
        
        for(int i=0; i<metaRecords.size(); i++){
            
            record = metaRecords.get(i);
            Collections.sort(record.kf, new customComparator());
            
            metaFile += record.rectID+" "+record.rectName+ " "+record.numOfKeyFrames+"\r\n";
            metaFile += record.linkedVideoName+" "+record.linkedVideoStartFrame+"\r\n";
            
            for(int j=0; j<record.numOfKeyFrames; j++){
                key = record.kf.get(j);
                metaFile += key.frameNum+" "+key.topLeftX+" "+key.topLeftY+" "+key.bottomRightX+" "+key.bottomRightY+"\r\n";
            }
        }
        out.write(metaFile);
        out.close();
        System.out.println("written to file");
    }
    
    public class customComparator implements Comparator<KeyFrame> {
        
        @Override
        public int compare(KeyFrame k1, KeyFrame k2) {
            if(k1.frameNum > k2.frameNum){
                return 1;
            }
            else if(k1.frameNum == k2.frameNum){
                return 0;
            }
            
            return (-1);
            //throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    
    //reading video file
    private void ReadVideo(String fileName, int primary) throws FileNotFoundException, IOException{
        
        byte[] videoFile;
        byte r, g, b;
        
        System.out.println(fileName);
        File file = new File(fileName);
        InputStream is = new FileInputStream(file);
        
        int offset = 0;
        int numRead = 0;
	videoFile = new byte[(int)file.length()];
         
        //reading the input file into bytes array
	while (offset < videoFile.length && (numRead=is.read(videoFile, offset, videoFile.length-offset)) >= 0) {
            offset += numRead;
        }
        //System.out.println("videoFile length="+videoFile.length);        
        
        if(primary==1){
            primaryFileName = fileName;
            primaryVideoFrames = new int[(videoFile.length/(3*height*width))][width][height];
        }
        else{
            secondaryFileName = fileName;
            secondaryVideoFrames = new int[(videoFile.length/(3*height*width))][width][height];
        }
        
        int counter = 0, pix;
        for(int i=0; i<720; i++){
            for(int j=0; j<288; j++){
                for(int k=0; k<352; k++){
                    r = videoFile[counter];
                    g = videoFile[counter+352*288];
                    b = videoFile[counter+352*288*2];
                    
                    pix = 0xff000000 | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
                    
                    if(primary==1)
                        primaryVideoFrames[i][k][j] = pix;
                    else
                        secondaryVideoFrames[i][k][j] = pix;
                    counter++;
                }
            }
            counter += (2*height*width); //jump to next frame index
        }
        if(primary==1)
            jSlider1.setValue(0);
        else
            jSlider2.setValue(0);
    }
    
    //displaying frame in the Jlabel
    public void setFrame(int fNumber, int primary){
     // /*  
        BufferedImage img;
        img = new BufferedImage(352, 288, BufferedImage.TYPE_INT_RGB);
        int pix;
        //System.out.println("reflected? "+fNumber);
        for(int i=0; i<352; i++){
            for(int j=0; j<288; j++){
                if(primary==1)
                    img.setRGB(i,j,primaryVideoFrames[fNumber][i][j]);
                else
                    img.setRGB(i,j,secondaryVideoFrames[fNumber][i][j]);
            }
        }
        
        if(primary==1)
        {
            jLabel3.setIcon(new ImageIcon(img));
        }
        else
        {
            jLabel4.setIcon(new ImageIcon(img));
        }
        setRectangles();
    }
    
    //displaying rectangles for the hyperlinks
    public void setRectangles() {
        int currentFrame = jSlider1.getValue();
        
        int linkSelected = jList2.getSelectedIndex();
        
        for(int i=0; i<metaRecords.size();i++)
        {
            Metafile m = metaRecords.get(i);
            for(int j=0; j<m.kf.size();j++)
            {
                KeyFrame k = m.kf.get(j);
                if(k.frameNum== currentFrame)
                {
                   //k.display();
                   Graphics g = jLabel3.getGraphics();
                   if(linkSelected==m.rectID)
                   {
                       g.setColor(Color.red);
                   }
                   else
                   {
                       g.setColor(Color.green);
                   }
                   g.drawRect(k.topLeftX,k.topLeftY,Math.abs(k.topLeftX-k.bottomRightX), Math.abs(k.topLeftY-k.bottomRightY));
                }
            }
        }
    }
}